# disconnect
RSQLite::dbDisconnect(con)
return(res)
}
Select("transactions", "db/test.db", where = list(date = "2010-1-1"))
Select <- function( table, db, where = NULL, enforce_foreign_keys = TRUE )
{
stopifnot(table %in% c("accounts", "transactions", "capital", "personalAccounts"))
# database
tab <- switch(table, accounts = "acc", transactions = "tra", capital = "cap", personalAccounts = "pers")
ref <- "accounts"
rels <- list(tra = c("payor", "payee"), cap = "account", pers = "account")
cols <- list(
acc = c("id", "owner", "iban", "bic"),
tra = c("payor", "payee", "date", "reference", "entry", "value", "currency", "type"),
cap = c("account", "date", "value", "currency"),
per = c("account", "type")
)
# columns
columns <- switch (tab,
acc = data.frame(column = cols$acc, as = cols$acc, stringsAsFactors = FALSE),
tra = data.frame(column = c(paste("payor", cols$acc, sep = "."), paste("payee", cols$acc, sep = "."), cols$tra[-c(1,2)]),
as = c(paste("payor", cols$acc, sep = "_"), paste("payee", cols$acc, sep = "_"), cols$tra[-c(1,2)]), stringsAsFactors = FALSE),
cap = data.frame(column = c(paste("account", cols$acc, sep = "."), cols$cap[-1]),
as = c(paste("account", cols$acc, sep = "_"), cols$cap[-1]), stringsAsFactors = FALSE),
per = data.frame(column = c(paste("account", cols$acc, sep = "."), cols$per[-1]),
as = c(paste("account", cols$acc, sep = "_"), cols$per[-1]), stringsAsFactors = FALSE)
)
columns <- paste(columns$column, "AS", columns$as, collapse = ", ")
# joins
joins <- switch (tab,
acc = table,
tra = paste(c(table, sprintf("%1$s AS %2$s ON %2$s.id = %3$s.%2$s", ref, rels$tra, table)), collapse = " INNER JOIN "),
cap = paste(c(table, sprintf("%1$s AS %2$s ON %2$s.id = %3$s.%2$s", ref, rels$cap, table)), collapse = " INNER JOIN "),
per = paste(c(table, sprintf("%1$s AS %2$s ON %2$s.id = %3$s.%2$s", ref, rels$per, table)), collapse = " INNER JOIN ")
)
# wheres
wheres <- ""
if( !is.null(where) ){
if( !is.null(where$date) ){
dates <- paste0("'", sort(as.Date(where$date)), "'")
stopifnot(length(dates) < 3)
if( length(dates) < 2 ){
wheres <- append(wheres, paste("date =", as.character(dates)))
} else {
wheres <- append(wheres, paste("date", c(">=", "<="), dates, collapse = " AND "))
}
}
wheres <- sprintf("WHERE %s", paste(wheres[-1], collapse = " AND "))
}
return(sprintf("SELECT %s FROM %s %s", columns, joins, wheres))
# connect, set PRAGMA
con <- RSQLite::dbConnect(RSQLite::SQLite(), dbname = db)
if( enforce_foreign_keys ) RSQLite::dbGetQuery(con, "PRAGMA foreign_keys = ON;")
# query
res <- RSQLite::dbGetQuery(con, sprintf("SELECT %s FROM %s %s", columns, joins, wheres))
# disconnect
RSQLite::dbDisconnect(con)
return(res)
}
Select("transactions", "db/test.db", where = list(date = "2010-1-1"))
Select("transactions", "db/test.db", where = list(date = c("2010-1-1", "2010-1-2"))
)
Select <- function( table, db, where = NULL, enforce_foreign_keys = TRUE )
{
stopifnot(table %in% c("accounts", "transactions", "capital", "personalAccounts"))
# database
tab <- switch(table, accounts = "acc", transactions = "tra", capital = "cap", personalAccounts = "pers")
ref <- "accounts"
rels <- list(tra = c("payor", "payee"), cap = "account", pers = "account")
cols <- list(
acc = c("id", "owner", "iban", "bic"),
tra = c("payor", "payee", "date", "reference", "entry", "value", "currency", "type"),
cap = c("account", "date", "value", "currency"),
per = c("account", "type")
)
# columns
columns <- switch (tab,
acc = data.frame(column = cols$acc, as = cols$acc, stringsAsFactors = FALSE),
tra = data.frame(column = c(paste("payor", cols$acc, sep = "."), paste("payee", cols$acc, sep = "."), cols$tra[-c(1,2)]),
as = c(paste("payor", cols$acc, sep = "_"), paste("payee", cols$acc, sep = "_"), cols$tra[-c(1,2)]), stringsAsFactors = FALSE),
cap = data.frame(column = c(paste("account", cols$acc, sep = "."), cols$cap[-1]),
as = c(paste("account", cols$acc, sep = "_"), cols$cap[-1]), stringsAsFactors = FALSE),
per = data.frame(column = c(paste("account", cols$acc, sep = "."), cols$per[-1]),
as = c(paste("account", cols$acc, sep = "_"), cols$per[-1]), stringsAsFactors = FALSE)
)
columns <- paste(columns$column, "AS", columns$as, collapse = ", ")
# joins
joins <- switch (tab,
acc = table,
tra = paste(c(table, sprintf("%1$s AS %2$s ON %2$s.id = %3$s.%2$s", ref, rels$tra, table)), collapse = " INNER JOIN "),
cap = paste(c(table, sprintf("%1$s AS %2$s ON %2$s.id = %3$s.%2$s", ref, rels$cap, table)), collapse = " INNER JOIN "),
per = paste(c(table, sprintf("%1$s AS %2$s ON %2$s.id = %3$s.%2$s", ref, rels$per, table)), collapse = " INNER JOIN ")
)
# wheres
wheres <- ""
if( !is.null(where) ){
if( !is.null(where$date) ){
dates <- paste0("'", sort(as.Date(where$date)), "'")
stopifnot(length(dates) < 3)
if( length(dates) < 2 ){
wheres <- append(wheres, paste("date =", as.character(dates)))
} else {
wheres <- append(wheres, paste("date", c(">=", "<="), dates, collapse = " AND "))
}
}
wheres <- sprintf("WHERE %s", paste(wheres[-1], collapse = " AND "))
}
#return(sprintf("SELECT %s FROM %s %s", columns, joins, wheres))
# connect, set PRAGMA
con <- RSQLite::dbConnect(RSQLite::SQLite(), dbname = db)
if( enforce_foreign_keys ) RSQLite::dbGetQuery(con, "PRAGMA foreign_keys = ON;")
# query
res <- RSQLite::dbGetQuery(con, sprintf("SELECT %s FROM %s %s", columns, joins, wheres))
# disconnect
RSQLite::dbDisconnect(con)
return(res)
}
Select("transactions", "db/test.db", where = list(date = c("2010-1-1", "2010-1-2")))
Select("accounts", "db/test.db", where = list(date = c("2010-1-1", "2010-1-2")))
Select("transactions", "db/test.db", where = list(date = "2010-1-1"))
Select("personalAccounts", "db/test.db")
Select <- function( table, db, where = NULL, enforce_foreign_keys = TRUE )
{
stopifnot(table %in% c("accounts", "transactions", "capital", "personalAccounts"))
# database
tab <- switch(table, accounts = "acc", transactions = "tra", capital = "cap", personalAccounts = "per")
ref <- "accounts"
rels <- list(tra = c("payor", "payee"), cap = "account", pers = "account")
cols <- list(
acc = c("id", "owner", "iban", "bic"),
tra = c("payor", "payee", "date", "reference", "entry", "value", "currency", "type"),
cap = c("account", "date", "value", "currency"),
per = c("account", "type")
)
# columns
columns <- switch (tab,
acc = data.frame(column = cols$acc, as = cols$acc, stringsAsFactors = FALSE),
tra = data.frame(column = c(paste("payor", cols$acc, sep = "."), paste("payee", cols$acc, sep = "."), cols$tra[-c(1,2)]),
as = c(paste("payor", cols$acc, sep = "_"), paste("payee", cols$acc, sep = "_"), cols$tra[-c(1,2)]), stringsAsFactors = FALSE),
cap = data.frame(column = c(paste("account", cols$acc, sep = "."), cols$cap[-1]),
as = c(paste("account", cols$acc, sep = "_"), cols$cap[-1]), stringsAsFactors = FALSE),
per = data.frame(column = c(paste("account", cols$acc, sep = "."), cols$per[-1]),
as = c(paste("account", cols$acc, sep = "_"), cols$per[-1]), stringsAsFactors = FALSE)
)
columns <- paste(columns$column, "AS", columns$as, collapse = ", ")
# joins
joins <- switch (tab,
acc = table,
tra = paste(c(table, sprintf("%1$s AS %2$s ON %2$s.id = %3$s.%2$s", ref, rels$tra, table)), collapse = " INNER JOIN "),
cap = paste(c(table, sprintf("%1$s AS %2$s ON %2$s.id = %3$s.%2$s", ref, rels$cap, table)), collapse = " INNER JOIN "),
per = paste(c(table, sprintf("%1$s AS %2$s ON %2$s.id = %3$s.%2$s", ref, rels$per, table)), collapse = " INNER JOIN ")
)
# wheres
wheres <- ""
if( !is.null(where) ){
if( !is.null(where$date) ){
dates <- paste0("'", sort(as.Date(where$date)), "'")
stopifnot(length(dates) < 3)
if( length(dates) < 2 ){
wheres <- append(wheres, paste("date =", as.character(dates)))
} else {
wheres <- append(wheres, paste("date", c(">=", "<="), dates, collapse = " AND "))
}
}
wheres <- sprintf("WHERE %s", paste(wheres[-1], collapse = " AND "))
}
#return(sprintf("SELECT %s FROM %s %s", columns, joins, wheres))
# connect, set PRAGMA
con <- RSQLite::dbConnect(RSQLite::SQLite(), dbname = db)
if( enforce_foreign_keys ) RSQLite::dbGetQuery(con, "PRAGMA foreign_keys = ON;")
# query
res <- RSQLite::dbGetQuery(con, sprintf("SELECT %s FROM %s %s", columns, joins, wheres))
# disconnect
RSQLite::dbDisconnect(con)
return(res)
}
Select("personalAccounts", "db/test.db")
Select <- function( table, db, where = NULL, enforce_foreign_keys = TRUE )
{
stopifnot(table %in% c("accounts", "transactions", "capital", "personalAccounts", "cashflow", "storage"))
# database
tab <- switch(table, accounts = "acc", transactions = "tra", capital = "cap", personalAccounts = "per", cashflow = "cas", storage = "sto")
ref <- "accounts"
rels <- list(tra = c("payor", "payee"), cap = "account", pers = "account")
cols <- list(
acc = c("id", "owner", "iban", "bic"),
tra = c("payor", "payee", "date", "reference", "entry", "value", "currency", "type"),
cap = c("account", "date", "value", "currency"),
per = c("account", "type"),
cas = c("start_day", "end_day", "value", "currency", "category", "comment"),
sto = c("name", "data")
)
# columns
columns <- switch (tab,
acc = data.frame(column = cols$acc, as = cols$acc, stringsAsFactors = FALSE),
tra = data.frame(column = c(paste("payor", cols$acc, sep = "."), paste("payee", cols$acc, sep = "."), cols$tra[-c(1,2)]),
as = c(paste("payor", cols$acc, sep = "_"), paste("payee", cols$acc, sep = "_"), cols$tra[-c(1,2)]), stringsAsFactors = FALSE),
cap = data.frame(column = c(paste("account", cols$acc, sep = "."), cols$cap[-1]),
as = c(paste("account", cols$acc, sep = "_"), cols$cap[-1]), stringsAsFactors = FALSE),
per = data.frame(column = c(paste("account", cols$acc, sep = "."), cols$per[-1]),
as = c(paste("account", cols$acc, sep = "_"), cols$per[-1]), stringsAsFactors = FALSE),
cas = data.frame(column = cols$cas, as = cols$cas, stringsAsFactors = FALSE),
sto = data.frame(column = cols$sto, as = cols$sto, stringsAsFactors = FALSE)
)
columns <- paste(columns$column, "AS", columns$as, collapse = ", ")
# joins
joins <- switch (tab,
acc = table,
tra = paste(c(table, sprintf("%1$s AS %2$s ON %2$s.id = %3$s.%2$s", ref, rels$tra, table)), collapse = " INNER JOIN "),
cap = paste(c(table, sprintf("%1$s AS %2$s ON %2$s.id = %3$s.%2$s", ref, rels$cap, table)), collapse = " INNER JOIN "),
per = paste(c(table, sprintf("%1$s AS %2$s ON %2$s.id = %3$s.%2$s", ref, rels$per, table)), collapse = " INNER JOIN "),
cas = table,
sto = table
)
# wheres
wheres <- ""
if( !is.null(where) ){
if( !is.null(where$date) ){
dates <- paste0("'", sort(as.Date(where$date)), "'")
stopifnot(length(dates) < 3)
if( length(dates) < 2 ){
wheres <- append(wheres, paste("date =", as.character(dates)))
} else {
wheres <- append(wheres, paste("date", c(">=", "<="), dates, collapse = " AND "))
}
}
if( !is.null(where$name) ){
wheres <- append(wheres, sprintf("name = '%s'", where$name))
}
wheres <- sprintf("WHERE %s", paste(wheres[-1], collapse = " AND "))
}
#return(sprintf("SELECT %s FROM %s %s", columns, joins, wheres))
# connect, set PRAGMA
con <- RSQLite::dbConnect(RSQLite::SQLite(), dbname = db)
if( enforce_foreign_keys ) RSQLite::dbGetQuery(con, "PRAGMA foreign_keys = ON;")
# query
res <- RSQLite::dbGetQuery(con, sprintf("SELECT %s FROM %s %s", columns, joins, wheres))
# disconnect
RSQLite::dbDisconnect(con)
return(res)
}
Select("personalAccounts", "db/test.db")
Select("cashflow", "db/test.db")
Select("storage", "db/test.db")
Select("storage", "db/test.db", where = list(name = "test1"))
as.Date("asd")
is.null(a)
is.null(a, Select)
where <- list(start_day = "asd", end_day = "asdf")
any(names(where) %in% c("date", "start_day", "end_day"))
dates <- [names(where) %in% c("date", "start_day", "end_day")]
dates <- names(where)[names(where) %in% c("date", "start_day", "end_day")]
dates
?intersect
any(setdiff(names(where), c("date", "start_day", "end_day")))
where$asd <- "asd"
any(setdiff(names(where), c("date", "start_day", "end_day")))
names(where)[names(where) %in% c("date", "start_day", "end_day")]
intersect(names(where), c("date", "start_day", "end_day"))
any(!names(where) %in% c("date", "start_day", "end_day"))
names(where) %in% c("date", "start_day", "end_day")
!names(where) %in% c("date", "start_day", "end_day")
setdiff(names(where), c("date", "start_day", "end_day"))
asd <- c("a", "b")
append(asd, c("c", "d"))
sprintf("asd %s asd", asd)
Select <- function( table, db, where = NULL, enforce_foreign_keys = TRUE )
{
stopifnot(table %in% c("accounts", "transactions", "capital", "personalAccounts", "cashflow", "storage"))
# database
tab <- switch(table, accounts = "acc", transactions = "tra", capital = "cap", personalAccounts = "per", cashflow = "cas", storage = "sto")
ref <- "accounts"
rels <- list(tra = c("payor", "payee"), cap = "account", pers = "account")
cols <- list(
acc = c("id", "owner", "iban", "bic"),
tra = c("payor", "payee", "date", "reference", "entry", "value", "currency", "type"),
cap = c("account", "date", "value", "currency"),
per = c("account", "type"),
cas = c("start_day", "end_day", "value", "currency", "category", "comment"),
sto = c("name", "data")
)
# columns
columns <- switch (tab,
acc = data.frame(column = cols$acc, as = cols$acc, stringsAsFactors = FALSE),
tra = data.frame(column = c(paste("payor", cols$acc, sep = "."), paste("payee", cols$acc, sep = "."), cols$tra[-c(1,2)]),
as = c(paste("payor", cols$acc, sep = "_"), paste("payee", cols$acc, sep = "_"), cols$tra[-c(1,2)]), stringsAsFactors = FALSE),
cap = data.frame(column = c(paste("account", cols$acc, sep = "."), cols$cap[-1]),
as = c(paste("account", cols$acc, sep = "_"), cols$cap[-1]), stringsAsFactors = FALSE),
per = data.frame(column = c(paste("account", cols$acc, sep = "."), cols$per[-1]),
as = c(paste("account", cols$acc, sep = "_"), cols$per[-1]), stringsAsFactors = FALSE),
cas = data.frame(column = cols$cas, as = cols$cas, stringsAsFactors = FALSE),
sto = data.frame(column = cols$sto, as = cols$sto, stringsAsFactors = FALSE)
)
columns <- paste(columns$column, "AS", columns$as, collapse = ", ")
# joins
joins <- switch (tab,
acc = table,
tra = paste(c(table, sprintf("%1$s AS %2$s ON %2$s.id = %3$s.%2$s", ref, rels$tra, table)), collapse = " INNER JOIN "),
cap = paste(c(table, sprintf("%1$s AS %2$s ON %2$s.id = %3$s.%2$s", ref, rels$cap, table)), collapse = " INNER JOIN "),
per = paste(c(table, sprintf("%1$s AS %2$s ON %2$s.id = %3$s.%2$s", ref, rels$per, table)), collapse = " INNER JOIN "),
cas = table,
sto = table
)
# wheres
wheres <- ""
if( !is.null(where) ){
# date, start_day, end_day
if( any(names(where) %in% c("date", "start_day", "end_day")) ){
dates <- intersect(names(where), c("date", "start_day", "end_day"))
for( i in dates ){
if( length(where[[i]]) < 2 ){
date <- as.character(as.Date(where[[i]]))
wheres <- append(wheres, sprintf("%s = '%s'", i, date))
} else {
date <- as.character(sort(as.Date(where[[i]])))
wheres <- append(wheres, sprintf("%1$s >= '%2$s' AND %1$s <= '%3$s'", i, date[1], date[2]))
}
}
}
# any kind of string
if( any(!names(where) %in% c("date", "start_day", "end_day")) ){
strings <- setdiff(names(where), c("date", "start_day", "end_day"))
for( i in strings ){
wheres <- append(wheres, sprintf("%s = '%s'", i, where[[i]]))
}
}
# combine
wheres <- sprintf("WHERE %s", paste(wheres[-1], collapse = " AND "))
}
return(sprintf("SELECT %s FROM %s %s", columns, joins, wheres))
# connect, set PRAGMA
con <- RSQLite::dbConnect(RSQLite::SQLite(), dbname = db)
if( enforce_foreign_keys ) RSQLite::dbGetQuery(con, "PRAGMA foreign_keys = ON;")
# query
res <- RSQLite::dbGetQuery(con, sprintf("SELECT %s FROM %s %s", columns, joins, wheres))
# disconnect
RSQLite::dbDisconnect(con)
return(res)
}
Select("storage", "db/test.db", where = list(name = "test1"))
Select("storage", "db/test.db", where = list(name = c("test1", "test2")))
Select("storage", "db/test.db", where = list(name = c("test1", "test2"), date = "2010-1-1"))
Select("storage", "db/test.db", where = list(name = c("test1", "test2"), date = c("2010-1-2", "2010-1-1")))
as.Date("asd")
Select <- function( table, db, where = NULL, enforce_foreign_keys = TRUE )
{
stopifnot(table %in% c("accounts", "transactions", "capital", "personalAccounts", "cashflow", "storage"))
# database
tab <- switch(table, accounts = "acc", transactions = "tra", capital = "cap", personalAccounts = "per", cashflow = "cas", storage = "sto")
ref <- "accounts"
rels <- list(tra = c("payor", "payee"), cap = "account", pers = "account")
cols <- list(
acc = c("id", "owner", "iban", "bic"),
tra = c("payor", "payee", "date", "reference", "entry", "value", "currency", "type"),
cap = c("account", "date", "value", "currency"),
per = c("account", "type"),
cas = c("start_day", "end_day", "value", "currency", "category", "comment"),
sto = c("name", "data")
)
# columns
columns <- switch (tab,
acc = data.frame(column = cols$acc, as = cols$acc, stringsAsFactors = FALSE),
tra = data.frame(column = c(paste("payor", cols$acc, sep = "."), paste("payee", cols$acc, sep = "."), cols$tra[-c(1,2)]),
as = c(paste("payor", cols$acc, sep = "_"), paste("payee", cols$acc, sep = "_"), cols$tra[-c(1,2)]), stringsAsFactors = FALSE),
cap = data.frame(column = c(paste("account", cols$acc, sep = "."), cols$cap[-1]),
as = c(paste("account", cols$acc, sep = "_"), cols$cap[-1]), stringsAsFactors = FALSE),
per = data.frame(column = c(paste("account", cols$acc, sep = "."), cols$per[-1]),
as = c(paste("account", cols$acc, sep = "_"), cols$per[-1]), stringsAsFactors = FALSE),
cas = data.frame(column = cols$cas, as = cols$cas, stringsAsFactors = FALSE),
sto = data.frame(column = cols$sto, as = cols$sto, stringsAsFactors = FALSE)
)
columns <- paste(columns$column, "AS", columns$as, collapse = ", ")
# joins
joins <- switch (tab,
acc = table,
tra = paste(c(table, sprintf("%1$s AS %2$s ON %2$s.id = %3$s.%2$s", ref, rels$tra, table)), collapse = " INNER JOIN "),
cap = paste(c(table, sprintf("%1$s AS %2$s ON %2$s.id = %3$s.%2$s", ref, rels$cap, table)), collapse = " INNER JOIN "),
per = paste(c(table, sprintf("%1$s AS %2$s ON %2$s.id = %3$s.%2$s", ref, rels$per, table)), collapse = " INNER JOIN "),
cas = table,
sto = table
)
# wheres
wheres <- ""
if( !is.null(where) ){
# date, start_day, end_day
if( any(names(where) %in% c("date", "start_day", "end_day")) ){
dates <- intersect(names(where), c("date", "start_day", "end_day"))
for( i in dates ){
if( length(where[[i]]) < 2 ){
date <- as.character(as.Date(where[[i]]))
wheres <- append(wheres, sprintf("%s = '%s'", i, date))
} else {
date <- as.character(sort(as.Date(where[[i]])))
wheres <- append(wheres, sprintf("%1$s >= '%2$s' AND %1$s <= '%3$s'", i, date[1], date[2]))
}
}
}
# any kind of string
if( any(!names(where) %in% c("date", "start_day", "end_day")) ){
strings <- setdiff(names(where), c("date", "start_day", "end_day"))
for( i in strings ){
wheres <- append(wheres, sprintf("%s = '%s'", i, where[[i]]))
}
}
# combine
wheres <- sprintf("WHERE %s", paste(wheres[-1], collapse = " AND "))
}
#return(sprintf("SELECT %s FROM %s %s", columns, joins, wheres))
# connect, set PRAGMA
con <- RSQLite::dbConnect(RSQLite::SQLite(), dbname = db)
if( enforce_foreign_keys ) RSQLite::dbGetQuery(con, "PRAGMA foreign_keys = ON;")
# query
res <- RSQLite::dbGetQuery(con, sprintf("SELECT %s FROM %s %s", columns, joins, wheres))
# disconnect
RSQLite::dbDisconnect(con)
return(res)
}
Select("storage", "db/test.db", where = list(name = c("test1", "test2")))
Select <- function( table, db, where = NULL, enforce_foreign_keys = TRUE )
{
stopifnot(table %in% c("accounts", "transactions", "capital", "personalAccounts", "cashflow", "storage"))
# database
tab <- switch(table, accounts = "acc", transactions = "tra", capital = "cap", personalAccounts = "per", cashflow = "cas", storage = "sto")
ref <- "accounts"
rels <- list(tra = c("payor", "payee"), cap = "account", pers = "account")
cols <- list(
acc = c("id", "owner", "iban", "bic"),
tra = c("payor", "payee", "date", "reference", "entry", "value", "currency", "type"),
cap = c("account", "date", "value", "currency"),
per = c("account", "type"),
cas = c("start_day", "end_day", "value", "currency", "category", "comment"),
sto = c("name", "data")
)
# columns
columns <- switch (tab,
acc = data.frame(column = cols$acc, as = cols$acc, stringsAsFactors = FALSE),
tra = data.frame(column = c(paste("payor", cols$acc, sep = "."), paste("payee", cols$acc, sep = "."), cols$tra[-c(1,2)]),
as = c(paste("payor", cols$acc, sep = "_"), paste("payee", cols$acc, sep = "_"), cols$tra[-c(1,2)]), stringsAsFactors = FALSE),
cap = data.frame(column = c(paste("account", cols$acc, sep = "."), cols$cap[-1]),
as = c(paste("account", cols$acc, sep = "_"), cols$cap[-1]), stringsAsFactors = FALSE),
per = data.frame(column = c(paste("account", cols$acc, sep = "."), cols$per[-1]),
as = c(paste("account", cols$acc, sep = "_"), cols$per[-1]), stringsAsFactors = FALSE),
cas = data.frame(column = cols$cas, as = cols$cas, stringsAsFactors = FALSE),
sto = data.frame(column = cols$sto, as = cols$sto, stringsAsFactors = FALSE)
)
columns <- paste(columns$column, "AS", columns$as, collapse = ", ")
# joins
joins <- switch (tab,
acc = table,
tra = paste(c(table, sprintf("%1$s AS %2$s ON %2$s.id = %3$s.%2$s", ref, rels$tra, table)), collapse = " INNER JOIN "),
cap = paste(c(table, sprintf("%1$s AS %2$s ON %2$s.id = %3$s.%2$s", ref, rels$cap, table)), collapse = " INNER JOIN "),
per = paste(c(table, sprintf("%1$s AS %2$s ON %2$s.id = %3$s.%2$s", ref, rels$per, table)), collapse = " INNER JOIN "),
cas = table,
sto = table
)
# wheres
wheres <- ""
if( !is.null(where) ){
# date, start_day, end_day
if( any(names(where) %in% c("date", "start_day", "end_day")) ){
dates <- intersect(names(where), c("date", "start_day", "end_day"))
for( i in dates ){
if( length(where[[i]]) < 2 ){
date <- as.character(as.Date(where[[i]]))
wheres <- append(wheres, sprintf("%s = '%s'", i, date))
} else {
date <- as.character(sort(as.Date(where[[i]])))
wheres <- append(wheres, sprintf("%1$s >= '%2$s' AND %1$s <= '%3$s'", i, date[1], date[2]))
}
}
}
# any kind of string
if( any(!names(where) %in% c("date", "start_day", "end_day")) ){
strings <- setdiff(names(where), c("date", "start_day", "end_day"))
for( i in strings ){
wheres <- append(wheres, paste(sprintf("%s = '%s'", i, where[[i]]), collapse = " OR "))
}
}
# combine
wheres <- sprintf("WHERE %s", paste(wheres[-1], collapse = " AND "))
}
#return(sprintf("SELECT %s FROM %s %s", columns, joins, wheres))
# connect, set PRAGMA
con <- RSQLite::dbConnect(RSQLite::SQLite(), dbname = db)
if( enforce_foreign_keys ) RSQLite::dbGetQuery(con, "PRAGMA foreign_keys = ON;")
# query
res <- RSQLite::dbGetQuery(con, sprintf("SELECT %s FROM %s %s", columns, joins, wheres))
# disconnect
RSQLite::dbDisconnect(con)
return(res)
}
Select("storage", "db/test.db", where = list(name = c("test1", "test2")))
Select("storage", "db/test.db", where = list(name = c("test1", "test")))
Select("storage", "db/test.db")
library(testthat)
test_dir("./inst/tests")
Create_testDB("./db")
db <- "db/test.db"
name <- "test2"
table <- "storage"
x <- list(a = 1:5, b = list(c = c("a", "b")))
InsertBLOB("test2", x, db)
?Select
df <- Select(table, db, eq = list(name = name))
df
unserialize(df$data)
unserialize(df$data[[1]])
roxygen2::roxygenise()
devtools::install()
library(testthat)
test_dir("./inst/tests")
