save(accounts, file = "accounts.rda")
save(transactions, file = "transactions.rda")
ls()
rm(list = ls())
setwd("~/src/mRc_repos/abacus")
dbPath <- normalize.path("./db")
dbPath <- normalizePath("./db")
roxygen2::roxygenise()
devtools::install()
library(abacus)
?invisible
invisible(transactions)
x <- transactions
x <- accounts
?transactions
?accounts
x <- transactions
roxygen2::roxygenise()
devtools::install()
?abacus::transactions
dbPath <- normalizePath("./db")
dbName <- file.path(dbPath, paste0(dbName, ".db"))
dbName <- "test"
dbName <- file.path(dbPath, paste0(dbName, ".db"))
Insert(abacus::accounts, "accounts", dbName, add_id = TRUE)
library(abacus)
Insert(abacus::accounts, "accounts", dbName, add_id = TRUE)
roxygen2::roxygenise()
devtools::install()
system.file("extdata", "database_schema.csv", package = "abacus")
system.file("extdata", "database_schema", package = "abacus")
?read
?readLines
schema <- readLines(system.file("extdata", "database_schema", package = "abacus"))
schmea[1:10]
schema[1:10]
?scan
schema <- scan(system.file("extdata", "database_schema", package = "abacus"), "", sep = ";")
schema
schema <- scan(system.file("extdata", "database_schema", package = "abacus"), "")
schema[1:10]
schema <- scan(system.file("extdata", "database_schema", package = "abacus"),
what = list(""), multi.line = TRUE, blank.lines.skip = TRUE)
schema
schema <- scan(system.file("extdata", "database_schema", package = "abacus"),
what = list("", ";"), multi.line = TRUE, blank.lines.skip = TRUE)
schema
schema <- scan(system.file("extdata", "database_schema", package = "abacus"),
what = list("", ");"), multi.line = TRUE, blank.lines.skip = TRUE)
schema
schema <- scan(system.file("extdata", "database_schema", package = "abacus"),
what = list("", " "), multi.line = TRUE, blank.lines.skip = TRUE)
schema
schema <- scan(system.file("extdata", "database_schema", package = "abacus"),
what = list("", " "), multi.line = TRUE, blank.lines.skip = FALSE)
schema
schema <- scan(system.file("extdata", "database_schema", package = "abacus"), sep = ";",
what = list("", " "), multi.line = TRUE, blank.lines.skip = FALSE)
schema
schema <- scan(system.file("extdata", "database_schema", package = "abacus"), sep = ";",
what = list(""), multi.line = TRUE, blank.lines.skip = FALSE)
schema
schema <- scan(system.file("extdata", "database_schema", package = "abacus"), sep = ";",
what = list("", "", "", "", "", "", "", ""), multi.line = TRUE, blank.lines.skip = FALSE)
schema
schema <- scan(system.file("extdata", "database_schema", package = "abacus"), sep = ";",
what = list("", "", "", "", "", "", "", ""), multi.line = TRUE, blank.lines.skip = TRUE)
schema
schema <- scan(system.file("extdata", "database_schema", package = "abacus"),
what = list("", "", "", "", "", "", "", ""), multi.line = TRUE, blank.lines.skip = TRUE)
schema <- scan(system.file("extdata", "database_schema", package = "abacus"),
what = list(""), multi.line = TRUE, blank.lines.skip = TRUE)
schema
schema <- scan(system.file("extdata", "database_schema", package = "abacus"),
what = "", blank.lines.skip = TRUE)
schema
cmds <- character(8)
schema <- scan(system.file("extdata", "database_schema", package = "abacus"),
sep = ";", what = "", blank.lines.skip = TRUE)
schema
schema <- scan(system.file("extdata", "database_schema", package = "abacus"),
what = "", blank.lines.skip = TRUE)
schema
cmds <- character(8)
n <- 1
for( i in schema ){
cmds[n] <- paste0(cmds[n], i)
if( i == ";)" ) n <- n + 1
}
cmds
cmds <- character(8)
n <- 1
for( i in schema ){
cmds[n] <- paste0(cmds[n], i)
if( i == ");" ) n <- n + 1
}
cmds
schema <- scan(system.file("extdata", "database_schema", package = "abacus"),
what = "", blank.lines.skip = TRUE)
sum(schema == ");")
schema
?grepl
sum(grepl("^.*;\)$", schema))
sum(grepl("^.*;\\)$", schema))
sum(grepl("^.*;)$", schema))
sum(grepl("NULL", schema))
sum(grepl(";)", schema))
sum(grepl("\;)", schema))
sum(grepl("\;", schema))
sum(grepl("\\;", schema))
schema <- scan(system.file("extdata", "database_schema", package = "abacus"), what = "", blank.lines.skip = TRUE)
cmds <- character(8)
n <- 1
for( i in schema ){
cmds[n] <- paste0(cmds[n], i)
if( grepl("\\;", i) ) n <- n + 1
}
cmds
cmds <- character(8)
n <- 1
for( i in schema ){
cmds[n] <- paste(cmds[n], i)
if( grepl("\\;", i) ) n <- n + 1
}
cmds
dbPath <- normalizePath("./db")
dbName <- "test"
dbName <- file.path(dbPath, paste0(dbName, ".db"))
con <- RSQLite::dbConnect(RSQLite::SQLite(), dbname = dbName)
for( i in cmds ) RSQLite::dbGetQuery(con, i)
Insert(abacus::accounts, "accounts", dbName, add_id = TRUE)
library(abacus)
Insert(abacus::accounts, "accounts", dbName, add_id = TRUE)
Insert(abacus::transactions, "transactions", dbName)
RSQLite::dbDisconnect(con)
RSQLite::dbDisconnect(con)
roxygen2::roxygenise()
devtools::install()
library(abacus)
Create_testDB("./db")
Create_testDB("./db")
df <- data.frame(owner = "Tulla", iban = "ASDF1234", bic = "ASD1234", type = "test")
df <- data.frame(owner = "Tulla", iban = "ASDF1234", bic = "ASD1234", type = "test")
names(df)
paste0("@", names(df))
paste0("@", names(df), collapse = ", ")
sprintf("INSERT INTO accounts VALUES ( %s )", paste0("@", names(df), collapse = ", ")
)
add_id <- TRUE
cols <- if( add_id ) c("id", names(df)) else names(df)
sprintf("INSERT INTO accounts VALUES (%s)", paste0("@", cols, collapse = ", "))
cols <- if( add_id ) c("NULL", names(df)) else names(df)
sprintf("INSERT INTO accounts VALUES (%s)", paste0("@", cols, collapse = ", "))
paste0("@", names(df), collapse = ", ")
cols <- if( add_id ) paste0("NULL, @", names(df), collapse = ", ") else paste0("@", names(df), collapse = ", ")
cols
paste0("@", names(df), collapse = ", ")
if( add_id ) cols <- paste("NULL", cols, sep = ", ")
cols
cols <- paste0("@", names(df), collapse = ", ")
if( add_id ) cols <- paste("NULL", cols, sep = ", ")
cols
cols
sprintf("INSERT INTO accounts VALUES (%s)", cols)
Insert <- function( data, table, db, add_id = FALSE, enforce_foreign_keys = TRUE )
{
if( class(data) != "data.frame" ) stop("data must be class data.frame")
# connect, set PRAGMA
con <- RSQLite::dbConnect(RSQLite::SQLite(), dbname = db)
if( enforce_foreign_keys ) RSQLite::dbGetQuery(con, "PRAGMA foreign_keys = ON;")
# write in db
cols <- paste0("@", names(df), collapse = ", ")
if( add_id ) cols <- paste("NULL", cols, sep = ", ")
RSQLite::dbGetPreparedQuery(con, sprintf("INSERT INTO accounts VALUES (%s)", cols), df)
# disconnect
RSQLite::dbDisconnect(con)
return(TRUE)
}
df <- data.frame(asd = "Harry G", asdf = "ASDF1234", asdfg = "ASD1234", type = "test")
Insert(df, "transactions", "./db/test.db")
Insert <- function( data, table, db, add_id = FALSE, enforce_foreign_keys = TRUE )
{
if( class(data) != "data.frame" ) stop("data must be class data.frame")
# connect, set PRAGMA
con <- RSQLite::dbConnect(RSQLite::SQLite(), dbname = db)
if( enforce_foreign_keys ) RSQLite::dbGetQuery(con, "PRAGMA foreign_keys = ON;")
# write in db
cols <- paste0("@", names(df), collapse = ", ")
if( add_id ) cols <- paste("NULL", cols, sep = ", ")
RSQLite::dbGetPreparedQuery(con, sprintf("INSERT INTO %s VALUES (%s)", cols), table, df)
# disconnect
RSQLite::dbDisconnect(con)
return(TRUE)
}
Insert(df, "transactions", "./db/test.db")
Insert <- function( data, table, db, add_id = FALSE, enforce_foreign_keys = TRUE )
{
if( class(data) != "data.frame" ) stop("data must be class data.frame")
# connect, set PRAGMA
con <- RSQLite::dbConnect(RSQLite::SQLite(), dbname = db)
if( enforce_foreign_keys ) RSQLite::dbGetQuery(con, "PRAGMA foreign_keys = ON;")
# write in db
cols <- paste0("@", names(df), collapse = ", ")
if( add_id ) cols <- paste("NULL", cols, sep = ", ")
RSQLite::dbGetPreparedQuery(con, sprintf("INSERT INTO %s VALUES (%s)", table, cols), df)
# disconnect
RSQLite::dbDisconnect(con)
return(TRUE)
}
Insert(df, "transactions", "./db/test.db")
Insert(df, "accounts", "./db/test.db")
Insert(df, "accounts", "./db/test.db", add_id = TRUE)
df <- data.frame(payor = 1, payee = 20, date = as.Date("2010-1-1"), reference = "test", entry = "test", value = 1111, currency = "ASD")
Insert(df, "transactions", "./db/test.db")
df <- data.frame(payor = 1, payee = 20, date = "2010-1-1", reference = "test", entry = "test", value = 1111, currency = "ASD")
Insert(df, "transactions", "./db/test.db")
df$payor <- 200
Insert(df, "transactions", "./db/test.db") # should fail because of foreign rule
setwd("~/src/mRc_repos/abacus/testdb_creation")
names <- read.csv("CSV_Database_of_First_Names.csv", stringsAsFactors = FALSE)
surnames <- read.csv("CSV_Database_of_Last_Names.csv", stringsAsFactors = FALSE)
IBANcountry <- c("DE", "AT", "CH", "EG", "BE", "FR", "GR", "IE", "IT", "NO", "SE", "ES", "GB", "AE")
n <- 100
konten <- data.frame(
owner = paste(sample(names$firstname, n, replace = TRUE), sample(surnames$lastname, 10, replace = TRUE)),
iban = "", bic = "", type = "bank account",
stringsAsFactors = FALSE)
konten$type[1] <- "giro"
konten$type[2] <- "savings"
konten$type[3:13] <- "cash"
set.seed(42)
konten$iban <- sapply(konten$iban, function(x) paste(c(sample(IBANcountry, 1), sample(c(0, 0, 0:9), sample(16:32, 1), replace = TRUE)), collapse = ""))
konten$ bic <- sapply(konten$bic, function(x) paste(c(sample(IBANcountry, 1), sample(c(toupper(letters), 0:9), sample(6:9, 1), replace = TRUE)), collapse = ""))
set.seed(42)
trans <- data.frame(
payor = NA, payee = NA,
date = sort(sample(seq(as.Date("2010-1-1"), as.Date("2011-1-1"), by = "day"), 1000, replace = TRUE)),
reference = "", entry = "", value = NA, currency = "EUR",
label = sample(c(rep("cash", 20), rep("random", 40), "savings in", rep("savings out", 3)), 1000, replace = TRUE),
stringsAsFactors = FALSE)
head(trans$date)
str(trans$date)
trans$date <- as.character(trans$date)
head(trans$date)
set.seed(42)
trans <- data.frame(
payor = NA, payee = NA,
date = sort(sample(seq(as.Date("2010-1-1"), as.Date("2011-1-1"), by = "day"), 1000, replace = TRUE)),
reference = "", entry = "", value = NA, currency = "EUR",
label = sample(c(rep("cash", 20), rep("random", 40), "savings in", rep("savings out", 3)), 1000, replace = TRUE),
stringsAsFactors = FALSE)
trans$date <- as.character(trans$date)
# random in
s <- TRUE
for( i in 1:nrow(trans) ){
if( s && as.POSIXlt(trans$date[i])$mday == 1 ) trans$label[i] <- "random in"
s <- switch(as.character(as.POSIXlt(trans$date[i])$mday), "1" = FALSE, TRUE)
}
idx <- which(trans$label == "random in")
trans$payor[idx] <- 14
trans$payee[idx] <- 1
trans$value[idx] <- 200000L
trans$reference[idx] <- "salary"
trans$entry[idx] <- "booking"
# random out
idx <- which(trans$label == "random")
trans$payor[idx] <- 1
trans$payee[idx] <- sample(15:100, length(idx), replace = TRUE)
trans$value[idx] <- rpois(length(idx), 2000)
trans$reference[idx] <- sample(apply(expand.grid(c("order", "booking", "purchase order"), c("REWE", "Aldi", "Mueller", "Aral", "Media Markt")), 1, function(x) paste(x, collapse = " ")), length(idx), replace = TRUE)
trans$entry[idx] <- sample(c("booking", "withdrawal", "transfer", "transaction"), length(idx), replace = TRUE)
# cash
idx <- which(trans$label == "cash")
trans$payor[idx] <- 1
trans$payee[idx] <- sample(3:13, length(idx), replace = TRUE)
trans$value[idx] <- sample(c(2000, 4000), length(idx), replace = TRUE)
trans$reference[idx] <- sample(c("Cash Point", "cash machine", "autoteller"), length(idx), replace = TRUE)
trans$entry[idx] <- "withdrawal"
# savings in
idx <- which(trans$label == "savings in")
trans$payor[idx] <- 2
trans$payee[idx] <- 1
trans$value[idx] <- sample(c(50000, 100000, 200000), length(idx), replace = TRUE)
trans$reference[idx] <- sample(c("holiday", "withdrawal", "purchase", "migration"), length(idx), replace = TRUE)
trans$entry[idx] <- "transaction"
# savings out
idx <- which(trans$label == "savings out")
trans$payor[idx] <- 1
trans$payee[idx] <- 2
trans$value[idx] <- sample(c(50000, 100000, 200000), length(idx), replace = TRUE)
trans$reference[idx] <- "savings"
trans$entry[idx] <- "transaction"
trans <- trans[, -8]
accounts <- konten
transactions <- trans
save(accounts, file = "accounts.rda")
save(transactions, file = "transactions.rda")
rm(list = ls())
setwd("~/src/mRc_repos/abacus")
roxygen2::roxygenise()
devtools::install()
library(abacus)
Create_testDB("./db")
Create_testDB("./db")
str(accounts)
dbPath = "~/data"
dbName = "test"
dbPath = "./db"
dbPath <- normalizePath(dbPath)
dbName <- file.path(dbPath, paste0(dbName, ".db"))
con <- RSQLite::dbConnect(RSQLite::SQLite(), dbname = dbName)
Insert(abacus::accounts, "accounts", dbName, add_id = TRUE)
data <- abacus::accounts
table <- "accounts"
db <- dbName
add_id = TRUE
con <- RSQLite::dbConnect(RSQLite::SQLite(), dbname = db)
if( enforce_foreign_keys ) RSQLite::dbGetQuery(con, "PRAGMA foreign_keys = ON;")
enforce_foreign_keys = TRUE
if( enforce_foreign_keys ) RSQLite::dbGetQuery(con, "PRAGMA foreign_keys = ON;")
cols <- paste0("@", names(data), collapse = ", ")
cols
if( add_id ) cols <- paste("NULL", cols, sep = ", ")
cols
RSQLite::dbGetPreparedQuery(con, sprintf("INSERT INTO %s VALUES (%s)", table, cols), data)
RSQLite::dbDisconnect(con)
devtools::install()
library(abacus)
Create_testDB("./db")
df <- data.frame(asd = "Harry G", asdf = "ASDF1234", asdfg = "ASD1234", type = "test")
Insert(df, "accounts", "./db/test.db", add_id = TRUE)
df <- data.frame(payor = 1, payee = 20, date = "2010-1-1", reference = "test", entry = "test", value = 1111, currency = "ASD")
Insert(df, "transactions", "./db/test.db")
df$payor <- 200
Insert(df, "transactions", "./db/test.db") # should fail because of foreign key rules
file.remove("./db/test.db")
?inherits
x <- 1L
class(x)
inherits(x, "integer")
inherits(x, "numeric")
?stopifnot
stopifnot(1==1)
stopifnot(1==2)
?ranges
library(SQLite)
library(RSQLite)
stopifnot(inherits(1L, "integer"))
stopifnot(inherits(1, "integer"))
library(abacus)
Create_testDB("./db")
db <- "db/test.db"
con <- dbConnect(SQLite(), dbname = db)
library(RSQLite)
dbGetQuery("SELECT * FROM accounts WHERE id > 99")
dbGetQuery(db, "SELECT * FROM accounts WHERE id > 99")
dbGetQuery(con, "SELECT * FROM accounts WHERE id > 99")
x <- list(a = 1:2, b = list(c = c("a", "b")))
str(x)
x
_x <- serialize(x)
x_ <- serialize(x)
?serialize
x_ <- serialize(x, NULL)
x_
str(x_)
x_1 <- unserialize(x_)
x_1
x_1 <- as.numeric(x_)
x_1
x_1 <- as.character(x_)
x_1
?raw
str(x_1)
x_2 <- as.raw(x_1)
x_2
x_E <- unserialize(x_2)
x_ <- as.raw(x)
x <- list(a = 1:2, b = list(c = c("a", "b")))
x_ <- serialize(x, NULL)
x_1 <- as.character(x_)
x_E <- unserialize(x_1)
?I
str(I(x_1))
x_2 <- as.raw(I(x_1))
x_2 <- I(x_1)
x_2
str(x_2)
x_E <- unserialize(x_2)
df <- data.frame(type = "test", model = x)
df
df <- data.frame(type = "test", model = as.raw(x))
x <- list(a = 1:2, b = list(c = c("a", "b")))
x_ <- serialize(x, NULL)
df <- data.frame(type = "test", model = as.raw(x_))
df
x <- list(a = 1:2, b = list(c = c("a", "b")))
x_ <- serialize(x, NULL)
x_
df <- data.frame(type = "test", model = I(x_))
df
lapply(1:3, function(x) 1:2)
df <- data.frame(type = "test", model = I(list(x_)))
df
df$type
df$model
dbGetPreparedQuery(con, "INSERT INTO classifier VALUES(@type, @model)", df)
con
dbGetQuery(con, "SELECT * FROM classifier")
df <- dbGetQuery(con, "SELECT * FROM classifier")
df$model
str(df$model[[i]])
str(df$model[[1]])
x2 <- unserialize(df$model[[1]])
x2
x <- list(a = 1:5, b = list(c = c("a", "b")))
x_ <- list(serialize(x, NULL))
df <- data.frame(type = "test2", model = I(x_), stringsAsFactors = FALSE) # serialize -> list() -> I()
dbDisconnect(con)
dbDisconnect(con)
Insert(df, "classifier", "db/test.db")
df <- dbGetQuery(con, "SELECT * FROM classifier") # ist als raw gespeichert
con <- dbConnect(SQLite(), dbname = "db/test.db")
df <- dbGetQuery(con, "SELECT * FROM classifier") # ist als raw gespeichert
x2 <- unserialize(df$model[2][[1]]) # element aus liste holen, unserializen
x2
dbDisconnect(con)
dbDisconnect(con)
identical(x, x2)
file.remove("./db/test.db")
install.packages("testhat")
install.packages("testthat")
browseVignettes("testthat")
help(package = "testthat")
library(testthat)
?auto_test
?test_package
sum(1, 2)
class(r)
test_file("test.Insert.R")
test_file("test.Insert.R")
sum(1:3)
test_file("test.Insert.R")
test_file("test.Insert.R")
test_dir("./inst/unitTests")
?context
test_dir("./inst/tests")
expect_error("a" + 1)
expect_error(1 + 1)
expect_true(FALSE)
expect_true(TRUE)
library(abacus)
library(testthat)
test_dir("./inst/tests")
?test_dir
test_dir("./inst/tests", env = parent.env())
?parent.env
environment()
test_dir("./inst/tests", env = environment())
test_package("abacus")
?test_package
test_package("abacus")
devtools::install()
test_package("abacus")
library(testthat)
test_package("abacus")
test_dir("./inst/tests")
?file.remove
?Create_testDB
?Insert
library(RSQLite)
db <- "test.db"
Create_testDB(".")
df <- data.frame(owner = "Harry G", iban = "ASDF1234", bic = "ASD1234", type = "test", stringsAsFactors = FALSE)
Insert(df, "accounts", db, add_id = TRUE)
con <- dbConnect(SQLite(), dbname = db)
df2 <- dbGetQuery(con, "SELECT * FROM accounts WHERE id > 100")
df2
identical(df, df2)
identical(df, df2[, 2:5])
expect_identical(df, df2[, 2:5])
expect_identical(df, df2[, 3:5])
df <- data.frame(payor = 1, payee = 20, date = "2010-1-1", reference = "test", entry = "test", value = 1111, currency = "ASD")
expect_true(Insert(df, "transactions", db))
con <- dbConnect(SQLite(), dbname = db)
df2 <- dbGetQuery(con, "SELECT * FROM accounts WHERE currency = 'ASD'")
df2 <- dbGetQuery(con, "SELECT * FROM transactions WHERE currency = 'ASD'")
df2
dbDisconnect(con)
expect_identical(df, df2)
df <- data.frame(payor = 1, payee = 20, date = "2010-1-1", reference = "test", entry = "test", value = 1111, currency = "ASD", stringsAsFactors = TRUE)
expect_identical(df, df2)
str(df2)
str(df)
df <- data.frame(payor = 1, payee = 20, date = "2010-1-1", reference = "test", entry = "test", value = 1111, currency = "ASD", stringsAsFactors = FALSE)
expect_identical(df, df2)
expect_equal(df, df2)
x <- list(a = 1:5, b = list(c = c("a", "b")))
x_ <- list(serialize(x, NULL))
df <- data.frame(type = "test2", model = I(x_), stringsAsFactors = FALSE)
expect_true(Insert(df, "classifier", db))
df <- dbGetQuery(con, "SELECT * FROM classifier")
con <- dbConnect(SQLite(), dbname = db)
df <- dbGetQuery(con, "SELECT * FROM classifier")
x2 <- unserialize(df$model[[1]])
x2
expect_identical(x, x2) # !TRUE
dbDisconnect(con)
library(testthat)
test_dir("./inst/tests")
test_dir("./inst/tests")
test_dir("./inst/tests")
