unique(trans$label)
idx <- which(trans$label == "random")
length(idx)
trans$label[idx] <- sample(c(rep("food", 10), "clothing", "purchase", "medics, health"), length(idx), replace = TRUE)
unique(trans$label)
accounts <- konten
transactions <- trans
save(accounts, file = "accounts.rda")
save(transactions, file = "transactions.rda")
rm(list = ls())
setwd("~/src/mRc_repos/abacus")
roxygen2::roxygenise()
library(abacus)
roxygen2::roxygenise()
devtools::install()
Create_testDB("./db")
library(abacus)
Create_testDB("./db")
pers <- data.frame(account = NA, comment = NA, stringsAsFactors = FALSE)
pers <- data.frame(account = NA, comment = "", stringsAsFactors = FALSE)
personalAccounts <- pers
save(accounts, file = "personalAccounts.rda")
save(personalAccounts, file = "personalAccounts.rda")
setwd("~/src/mRc_repos/abacus")
roxygen2::roxygenise()
library(abacus)
roxygen2::roxygenise()
devtools::install()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(abacus)
roxygen2::roxygenise()
devtools::install()
devtools::install()
library(abacus)
Create_testDB("./db")
load("/home/marc/src/mRc_repos/abacus/data/personalAccounts.rda")
pers <- data.frame(account = 1:2, comment = c("giro", "savings"), stringsAsFactors = FALSE)
personalAccounts <- pers
save(personalAccounts, file = "personalAccounts.rda")
load("/home/marc/src/mRc_repos/abacus/personalAccounts.rda")
load("/home/marc/src/mRc_repos/abacus/data/personalAccounts.rda")
devtools::install()
load("/home/marc/src/mRc_repos/abacus/data/personalAccounts.rda")
library(abacus)
Create_testDB("./db")
db <- "test.db"
setwd("./db")
con <- dbConnect(SQLite(), dbname = db)
library(RSQLite)
con <- dbConnect(SQLite(), dbname = db)
dbGetQuery(con, "SELECT * FROM personalAccounts")
dbGetQuery(con, ".schema")
dbGetQuery(con, ".tables")
dbGetQuery(con, "tables")
dbGetQuery(con,  "SELECT * FROM sqlite_master WHERE tbl_name = 'accounts'")
df <- dbGetQuery(con,  "SELECT * FROM sqlite_master WHERE tbl_name = 'accounts'")
df <- dbGetQuery(con,  "SELECT * FROM sqlite_master") # WHERE tbl_name = 'accounts'")
library(testthat)
df$type
expect_equal(df$type, c("table", "table", "index", "index", "table", "index", "table", "index", "table", "table"))
df$name
expect_equal(df$name, c("accounts", "transactions", "transact_payor_index", "transact_payee_index", "capital",
"capital_index", "personalAccounts", "personalAccounts_index", "cashflow", "classifier"))
df$rootpage
expect_equal(df$rootpage, c(2, 3, 4, 5, 6, 7, 9, 11, 12, 13))
setwd("~/src/mRc_repos/abacus")
devtools::install()
library(abacus)
?Create_testDB
library(testthat)
test_dir("./inst/tests")
setwd("~/abacus")
setwd("~/abacus/testdb_creation")
names <- read.csv("CSV_Database_of_First_Names.csv", stringsAsFactors = FALSE)
surnames <- read.csv("CSV_Database_of_Last_Names.csv", stringsAsFactors = FALSE)
IBANcountry <- c("DE", "AT", "CH", "EG", "BE", "FR", "GR", "IE", "IT", "NO", "SE", "ES", "GB", "AE")
n <- 100
konten <- data.frame(
owner = paste(sample(names$firstname, n, replace = TRUE), sample(surnames$lastname, 10, replace = TRUE)),
iban = "", bic = "", type = "bank account",
stringsAsFactors = FALSE)
head(konten)
konten <- data.frame(
owner = paste(sample(names$firstname, n, replace = TRUE), sample(surnames$lastname, 10, replace = TRUE)),
iban = "", bic = "",
stringsAsFactors = FALSE)
head(konten)
konten <- data.frame(
owner = paste(sample(names$firstname, n, replace = TRUE), sample(surnames$lastname, 10, replace = TRUE)),
iban = "", bic = "", type = "bank account",
stringsAsFactors = FALSE)
konten$type[1] <- "giro"
konten$type[2] <- "savings"
konten$type[3:13] <- "cash"
konten$iban <- sapply(konten$iban, function(x) paste(c(sample(IBANcountry, 1), sample(c(0, 0, 0:9), sample(16:32, 1), replace = TRUE)), collapse = ""))
konten$ bic <- sapply(konten$bic, function(x) paste(c(sample(IBANcountry, 1), sample(c(toupper(letters), 0:9), sample(6:9, 1), replace = TRUE)), collapse = ""))
head(konten)
persKonten <- konten[1:2, ]
persKonten
persKonten <- data.frame(account = 1:2, type = c("giro", "savings"), stringsAsFactors = FALSE)
persKonten
konten$type <- NULL
head(konten)
konten <- data.frame(
owner = paste(sample(names$firstname, n, replace = TRUE), sample(surnames$lastname, 10, replace = TRUE)),
iban = "", bic = "", type = "bank account",
stringsAsFactors = FALSE)
konten$type[1] <- "giro"
konten$type[2] <- "savings"
konten$type[3:13] <- "cash"
konten$iban <- sapply(konten$iban, function(x) paste(c(sample(IBANcountry, 1), sample(c(0, 0, 0:9), sample(16:32, 1), replace = TRUE)), collapse = ""))
konten$ bic <- sapply(konten$bic, function(x) paste(c(sample(IBANcountry, 1), sample(c(toupper(letters), 0:9), sample(6:9, 1), replace = TRUE)), collapse = ""))
set.seed(42)
trans <- data.frame(
payor = NA, payee = NA,
date = sort(sample(seq(as.Date("2010-1-1"), as.Date("2011-1-1"), by = "day"), 1000, replace = TRUE)),
reference = "", entry = "", value = NA, currency = "EUR",
type = sample(c(rep("cash withdrawal", 20), rep("food", 20), rep("purchase", 14), rep("health/medicine", 2), rep("clothing", 4), "savings withdrawal", rep("savings", 3)), 1000, replace = TRUE),
stringsAsFactors = FALSE)
trans$date <- as.character(trans$date)
head(trans)
trans[1:10, ]
konten$type[37:47] <- "health"
n <- 100
set.seed(42)
konten <- data.frame(
owner = paste(sample(names$firstname, n, replace = TRUE), sample(surnames$lastname, 10, replace = TRUE)),
iban = "", bic = "", type = "food",
stringsAsFactors = FALSE)
konten$type[1] <- "giro"
konten$type[2] <- "savings"
konten$type[3:13] <- "cash"
konten$type[14] <- "insurance"
konten$type[15] <- "rent"
konten$type[16:46] <- "purchase"
konten$type[47:57] <- "health"
konten$type[58:68] <- "cloth"
konten$iban <- sapply(konten$iban, function(x) paste(c(sample(IBANcountry, 1), sample(c(0, 0, 0:9), sample(16:32, 1), replace = TRUE)), collapse = ""))
konten$ bic <- sapply(konten$bic, function(x) paste(c(sample(IBANcountry, 1), sample(c(toupper(letters), 0:9), sample(6:9, 1), replace = TRUE)), collapse = ""))
persKonten <- data.frame(account = 1:2, type = c("giro", "savings"), stringsAsFactors = FALSE)
set.seed(42)
trans <- data.frame(
payor = NA, payee = NA,
date = as.character(sort(sample(seq(as.Date("2010-1-1"), as.Date("2011-1-1"), by = "day"), 1000, replace = TRUE))),
reference = "", entry = "", value = NA, currency = "EUR",
type = sample(c(rep("cash withdrawal", 20), rep("food", 20), rep("purchase", 14), rep("health/medicine", 2), rep("clothing", 4), "savings withdrawal", rep("savings", 3)), 1000, replace = TRUE),
stringsAsFactors = FALSE)
for( i in 1:nrow(trans) ){
if( as.POSIXlt(as.Date(trans$date[i]))$mday == 1 && as.POSIXlt(as.Date(trans$date[i-1]))$mday > 1 ){
print("1st of month")
}
}
for( i in 2:nrow(trans) ){
if( as.POSIXlt(as.Date(trans$date[i]))$mday == 1 && as.POSIXlt(as.Date(trans$date[i-1]))$mday > 1 ){
print("1st of month")
}
}
for( i in 2:nrow(trans) ){
if( as.POSIXlt(as.Date(trans$date[i]))$mday == 1 && as.POSIXlt(as.Date(trans$date[i-1]))$mday > 1 ){
trans$payor[i] <- 1
trans$payee[i] <- 15
trans$reference[i] <- "Rent Rohrbacher 21"
trans$entry[i] <- "transaction"
trans$value[i] <- 80000
trans$type[i] <- "rent"
trans$payor[i+1] <- 1
trans$payee[i+1] <- 14
trans$reference[i+1] <- "HanseMerkur dues"
trans$entry[i+1] <- "transaction"
trans$value[i+1] <- 20000
trans$type[i+1] <- "insurance"
}
}
for( i in 2:(nrow(trans)-1) ){
if( as.POSIXlt(as.Date(trans$date[i]))$mday == 1 && as.POSIXlt(as.Date(trans$date[i-1]))$mday > 1 ){
trans$payor[i] <- 1
trans$payee[i] <- 15
trans$reference[i] <- "Rent Rohrbacher 21"
trans$entry[i] <- "transaction"
trans$value[i] <- 80000
trans$type[i] <- "rent"
trans$payor[i+1] <- 1
trans$payee[i+1] <- 14
trans$reference[i+1] <- "HanseMerkur dues"
trans$entry[i+1] <- "transaction"
trans$value[i+1] <- 20000
trans$type[i+1] <- "insurance"
}
}
trans$payor[1] <- 1
trans$payee[1] <- 15
trans$reference[1] <- "Rent Rohrbacher 21"
trans$entry[1] <- "transaction"
trans$value[1] <- 80000
trans$type[1] <- "rent"
trans$payor[2] <- 1
trans$payee[2] <- 14
trans$reference[2] <- "HanseMerkur dues"
trans$entry[2] <- "transaction"
trans$value[2] <- 20000
trans$type[2] <- "insurance"
head(trans)
konten[konten$type == "cash"]
konten$id[konten$type == "cash"]
which(konten$type == "cash")
sample(which(konten$type == "cash"), 1)
sample(which(konten$type == "cash"), 1)
sample(which(konten$type == "cash"), 1)
sample(which(konten$type == "cash"), 1)
sample(which(konten$type == "cash"), 1)
rnowm(10,2)
rnorm(10,2)
rnorm(1,25)
rnorm(1,25)
rnorm(1,25)
rnorm(1,25)
rnorm(1,25, 5)
rnorm(1,25, 5)
rnorm(1,25, 5)
rnorm(1,25, 5)
rnorm(1,25, 5)
rnorm(1,25, 5)
rnorm(1,25, 5)
rnorm(1,25, 5)
set.seed(42)
trans <- data.frame(
payor = NA, payee = NA,
date = as.character(sort(sample(seq(as.Date("2010-1-1"), as.Date("2011-1-1"), by = "day"), 1000, replace = TRUE))),
reference = "", entry = "", value = NA, currency = "EUR",
type = sample(c(rep("cash withdrawal", 20), rep("food", 20), rep("purchase", 14), rep("health/medicine", 2), rep("clothing", 4), "savings withdrawal", rep("savings", 3)), 1000, replace = TRUE),
stringsAsFactors = FALSE)
trans$payor[1] <- 1
trans$payee[1] <- 15
trans$reference[1] <- "Rent Rohrbacher 21"
trans$entry[1] <- "transaction"
trans$value[1] <- 80000
trans$type[1] <- "rent"
trans$payor[2] <- 1
trans$payee[2] <- 14
trans$reference[2] <- "HanseMerkur dues"
trans$entry[2] <- "transaction"
trans$value[2] <- 20000
trans$type[2] <- "insurance"
for( i in 2:(nrow(trans)-1) ){
if( as.POSIXlt(as.Date(trans$date[i]))$mday == 1 && as.POSIXlt(as.Date(trans$date[i-1]))$mday > 1 ){
trans$payor[i] <- 1
trans$payee[i] <- 15
trans$reference[i] <- "Rent Rohrbacher 21"
trans$entry[i] <- "transaction"
trans$value[i] <- 80000
trans$type[i] <- "rent"
trans$payor[i+1] <- 1
trans$payee[i+1] <- 14
trans$reference[i+1] <- "HanseMerkur dues"
trans$entry[i+1] <- "transaction"
trans$value[i+1] <- 20000
trans$type[i+1] <- "insurance"
}
}
for( i in 1:nrow(trans) ){
if( type == "cash withdrawal" ){
trans$payor[i] <- 1
trans$payee[i] <- sample(which(konten$type == "cash"), 1)
trans$reference[i] <- sample(c("EC 97749000DE992", "credit 83900021AF0029"), 1)
trans$entry[i] <- sample(c("cashpoint", "teller", "auto teller", "cash terminal"), 1)
trans$value[i] <- sample(c(20, 40, 60), 1)
} else if( type == "food" ){
trans$payor[i] <- 1
trans$payee[i] <- sample(which(konten$type == "food"), 1)
trans$reference[i] <- sample(c("Thanks, Aldi", "Rewe says thanks", "REWE", "Penny"), 1)
trans$entry[i] <- sample(c("debit", "debit withdrawal", "debit entry", "debit note"), 1)
trans$value[i] <- rnorm(1,25, 5)
} else if( type == "purchase" ){
trans$payor[i] <- 1
trans$payee[i] <- sample(which(konten$type == "purchase"), 1)
trans$reference[i] <- sample(c("Thanks, Kaufland", "Kaufland says thanks", "MUELLER", "Depot"), 1)
trans$entry[i] <- sample(c("debit", "debit withdrawal", "debit entry", "debit note"), 1)
trans$value[i] <- rnorm(1,35, 5)
} else if( type == "health/medicine" ){
trans$payor[i] <- 1
trans$payee[i] <- sample(which(konten$type == "health"), 1)
trans$reference[i] <- sample(c("Star Pharmacy", "StLouis Hospital", "Cross Pharm"), 1)
trans$entry[i] <- sample(c("debit", "debit withdrawal", "debit entry", "debit note"), 1)
trans$value[i] <- rnorm(1,45, 5)
} else if( type == "clothing" ){
trans$payor[i] <- 1
trans$payee[i] <- sample(which(konten$type == "cloth"), 1)
trans$reference[i] <- sample(c("H+M", "MarcOPolo", "HM"), 1)
trans$entry[i] <- sample(c("debit", "debit withdrawal", "debit entry", "debit note"), 1)
trans$value[i] <- rnorm(1,55, 5)
} else if( type == "savings withdrawal" ){
trans$payor[i] <- 2
trans$payee[i] <- 1
trans$reference[i] <- sample(c("vacation", "migrate", "backup"), 1)
trans$entry[i] <- "transaction"
trans$value[i] <- sample(c(200, 500, 1000), 1)
} else if( type == "savings" ){
trans$payor[i] <- 1
trans$payee[i] <- 2
trans$reference[i] <- sample(c("savings", "invest", "for depot", "for daily"), 1)
trans$entry[i] <- "transaction"
trans$value[i] <- sample(c(500, 1000), 1)
}
}
for( i in 1:nrow(trans) ){
if( trans$type[i] == "cash withdrawal" ){
trans$payor[i] <- 1
trans$payee[i] <- sample(which(konten$type == "cash"), 1)
trans$reference[i] <- sample(c("EC 97749000DE992", "credit 83900021AF0029"), 1)
trans$entry[i] <- sample(c("cashpoint", "teller", "auto teller", "cash terminal"), 1)
trans$value[i] <- sample(c(20, 40, 60), 1)
} else if( trans$type[i] == "food" ){
trans$payor[i] <- 1
trans$payee[i] <- sample(which(konten$type == "food"), 1)
trans$reference[i] <- sample(c("Thanks, Aldi", "Rewe says thanks", "REWE", "Penny"), 1)
trans$entry[i] <- sample(c("debit", "debit withdrawal", "debit entry", "debit note"), 1)
trans$value[i] <- rnorm(1,25, 5)
} else if( trans$type[i] == "purchase" ){
trans$payor[i] <- 1
trans$payee[i] <- sample(which(konten$type == "purchase"), 1)
trans$reference[i] <- sample(c("Thanks, Kaufland", "Kaufland says thanks", "MUELLER", "Depot"), 1)
trans$entry[i] <- sample(c("debit", "debit withdrawal", "debit entry", "debit note"), 1)
trans$value[i] <- rnorm(1,35, 5)
} else if( trans$type[i] == "health/medicine" ){
trans$payor[i] <- 1
trans$payee[i] <- sample(which(konten$type == "health"), 1)
trans$reference[i] <- sample(c("Star Pharmacy", "StLouis Hospital", "Cross Pharm"), 1)
trans$entry[i] <- sample(c("debit", "debit withdrawal", "debit entry", "debit note"), 1)
trans$value[i] <- rnorm(1,45, 5)
} else if( trans$type[i] == "clothing" ){
trans$payor[i] <- 1
trans$payee[i] <- sample(which(konten$type == "cloth"), 1)
trans$reference[i] <- sample(c("H+M", "MarcOPolo", "HM"), 1)
trans$entry[i] <- sample(c("debit", "debit withdrawal", "debit entry", "debit note"), 1)
trans$value[i] <- rnorm(1,55, 5)
} else if( trans$type[i] == "savings withdrawal" ){
trans$payor[i] <- 2
trans$payee[i] <- 1
trans$reference[i] <- sample(c("vacation", "migrate", "backup"), 1)
trans$entry[i] <- "transaction"
trans$value[i] <- sample(c(200, 500, 1000), 1)
} else if( trans$type[i] == "savings" ){
trans$payor[i] <- 1
trans$payee[i] <- 2
trans$reference[i] <- sample(c("savings", "invest", "for depot", "for daily"), 1)
trans$entry[i] <- "transaction"
trans$value[i] <- sample(c(500, 1000), 1)
}
}
any(is.na(trans$payor))
any(is.na(trans$payee))
any(is.na(trans$value))
any(trans$value < 0)
any(trans$entry == "")
any(trans$reference == "")
accounts <- konten
transactions <- trans
personalAccounts <- pers
personalAccounts <- persKonten
str(accounts)
accounts$type <- NULL
str(accounts)
str(transactions)
str(personalAccounts)
save(accounts, file = "accounts.rda")
save(transactions, file = "transactions.rda")
save(personalAccounts, file = "personalAccounts.rda")
rm(list = ls())
names <- read.csv("CSV_Database_of_First_Names.csv", stringsAsFactors = FALSE)
surnames <- read.csv("CSV_Database_of_Last_Names.csv", stringsAsFactors = FALSE)
IBANcountry <- c("DE", "AT", "CH", "EG", "BE", "FR", "GR", "IE", "IT", "NO", "SE", "ES", "GB", "AE")
n <- 100
set.seed(42)
konten <- data.frame(
owner = paste(sample(names$firstname, n, replace = TRUE), sample(surnames$lastname, 10, replace = TRUE)),
iban = "", bic = "", type = "food",
stringsAsFactors = FALSE)
konten$type[1] <- "giro"
konten$type[2] <- "savings"
konten$type[3:13] <- "cash"
konten$type[14] <- "insurance"
konten$type[15] <- "rent"
konten$type[16:46] <- "purchase"
konten$type[47:57] <- "health"
konten$type[58:68] <- "cloth"
konten$iban <- sapply(konten$iban, function(x) paste(c(sample(IBANcountry, 1), sample(c(0, 0, 0:9), sample(16:32, 1), replace = TRUE)), collapse = ""))
konten$ bic <- sapply(konten$bic, function(x) paste(c(sample(IBANcountry, 1), sample(c(toupper(letters), 0:9), sample(6:9, 1), replace = TRUE)), collapse = ""))
persKonten <- data.frame(account = 1:2, type = c("giro", "savings"), stringsAsFactors = FALSE)
set.seed(42)
trans <- data.frame(
payor = NA, payee = NA,
date = as.character(sort(sample(seq(as.Date("2010-1-1"), as.Date("2011-1-1"), by = "day"), 1000, replace = TRUE))),
reference = "", entry = "", value = NA, currency = "EUR",
type = sample(c(rep("cash withdrawal", 20), rep("food", 20), rep("purchase", 14), rep("health/medicine", 2), rep("clothing", 4), "savings withdrawal", rep("savings", 3)), 1000, replace = TRUE),
stringsAsFactors = FALSE)
trans$payor[1] <- 1
trans$payee[1] <- 15
trans$reference[1] <- "Rent Rohrbacher 21"
trans$entry[1] <- "transaction"
trans$value[1] <- 80000
trans$type[1] <- "rent"
trans$payor[2] <- 1
trans$payee[2] <- 14
trans$reference[2] <- "HanseMerkur dues"
trans$entry[2] <- "transaction"
trans$value[2] <- 20000
trans$type[2] <- "insurance"
for( i in 2:(nrow(trans)-1) ){
if( as.POSIXlt(as.Date(trans$date[i]))$mday == 1 && as.POSIXlt(as.Date(trans$date[i-1]))$mday > 1 ){
trans$payor[i] <- 1
trans$payee[i] <- 15
trans$reference[i] <- "Rent Rohrbacher 21"
trans$entry[i] <- "transaction"
trans$value[i] <- 80000
trans$type[i] <- "rent"
trans$payor[i+1] <- 1
trans$payee[i+1] <- 14
trans$reference[i+1] <- "HanseMerkur dues"
trans$entry[i+1] <- "transaction"
trans$value[i+1] <- 20000
trans$type[i+1] <- "insurance"
}
}
for( i in 1:nrow(trans) ){
if( trans$type[i] == "cash withdrawal" ){
trans$payor[i] <- 1
trans$payee[i] <- sample(which(konten$type == "cash"), 1)
trans$reference[i] <- sample(c("EC 97749000DE992", "credit 83900021AF0029"), 1)
trans$entry[i] <- sample(c("cashpoint", "teller", "auto teller", "cash terminal"), 1)
trans$value[i] <- sample(c(20, 40, 60), 1)
} else if( trans$type[i] == "food" ){
trans$payor[i] <- 1
trans$payee[i] <- sample(which(konten$type == "food"), 1)
trans$reference[i] <- sample(c("Thanks, Aldi", "Rewe says thanks", "REWE", "Penny"), 1)
trans$entry[i] <- sample(c("debit", "debit withdrawal", "debit entry", "debit note"), 1)
trans$value[i] <- rnorm(1,25, 5)
} else if( trans$type[i] == "purchase" ){
trans$payor[i] <- 1
trans$payee[i] <- sample(which(konten$type == "purchase"), 1)
trans$reference[i] <- sample(c("Thanks, Kaufland", "Kaufland says thanks", "MUELLER", "Depot"), 1)
trans$entry[i] <- sample(c("debit", "debit withdrawal", "debit entry", "debit note"), 1)
trans$value[i] <- rnorm(1,35, 5)
} else if( trans$type[i] == "health/medicine" ){
trans$payor[i] <- 1
trans$payee[i] <- sample(which(konten$type == "health"), 1)
trans$reference[i] <- sample(c("Star Pharmacy", "StLouis Hospital", "Cross Pharm"), 1)
trans$entry[i] <- sample(c("debit", "debit withdrawal", "debit entry", "debit note"), 1)
trans$value[i] <- rnorm(1,45, 5)
} else if( trans$type[i] == "clothing" ){
trans$payor[i] <- 1
trans$payee[i] <- sample(which(konten$type == "cloth"), 1)
trans$reference[i] <- sample(c("H+M", "MarcOPolo", "HM"), 1)
trans$entry[i] <- sample(c("debit", "debit withdrawal", "debit entry", "debit note"), 1)
trans$value[i] <- rnorm(1,55, 5)
} else if( trans$type[i] == "savings withdrawal" ){
trans$payor[i] <- 2
trans$payee[i] <- 1
trans$reference[i] <- sample(c("vacation", "migrate", "backup"), 1)
trans$entry[i] <- "transaction"
trans$value[i] <- sample(c(200, 500, 1000), 1)
} else if( trans$type[i] == "savings" ){
trans$payor[i] <- 1
trans$payee[i] <- 2
trans$reference[i] <- sample(c("savings", "invest", "for depot", "for daily"), 1)
trans$entry[i] <- "transaction"
trans$value[i] <- sample(c(500, 1000), 1)
}
}
accounts <- konten
accounts$type <- NULL
transactions <- trans
personalAccounts <- persKonten
save(accounts, file = "accounts.rda")
save(transactions, file = "transactions.rda")
save(personalAccounts, file = "personalAccounts.rda")
rm(list = ls())
setwd("~/abacus")
library(abacus)
Create_testDB("./db")
devtools::install()
library(abacus)
Create_testDB("./db")
Create_testDB("./db")
library(testthat)
test_dir("./inst/tests")
library(RSQLite)
db <- "db/test.db"
con <- dbConnect(SQLite(), dbname = db)
df <- dbGetQuery(con,  "SELECT * FROM sqlite_master")
devtools::install()
library(testthat)
test_dir("./inst/tests")
devtools::install()
library(testthat)
test_dir("./inst/tests")
dbDisconnect(con)
library(testthat)
test_dir("./inst/tests")
devtools::install()
library(testthat)
test_dir("./inst/tests")
a <- function(x) x^2
a(2)
a_ <- serialize(a)
?serialize
a_ <- serialize(a, NULL)
a_
b <- unserialize(a_)
b(2)
library(testthat)
test_dir("./inst/tests")
